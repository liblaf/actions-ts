# yaml-language-server: $schema=https://json.schemastore.org/github-action.json

name: Changelog

author: liblaf

description: Changelog

inputs:
  output:
    description: Output file.
    required: false
    default: ${{ runner.temp }}/CHANGELOG.md
  repository:
    description: The owner and repository name. For example, `octocat/Hello-World`.
    required: false
    default: ${{ github.repository }}

  # orhun/git-cliff-action
  config:
    description: config file location
    required: false
  args:
    description: git-cliff arguments
    required: false
    default: --verbose
  token:
    description: GitHub API token
    required: false
    default: ${{ github.token }}

outputs:
  changelog:
    description: Output file that contains the generated changelog.
    value: ${{ steps.cliff.outputs.changelog }}
  content:
    description: Content of the changelog.
    value: ${{ steps.output.outputs.content }}
  version:
    description: Version of the latest release.
    value: ${{ steps.cliff.outputs.version }}

runs:
  using: composite
  steps:
    - id: config
      name: Find Config
      run: |-
        if [[ -f '${{ inputs.config }}' ]]; then
          printf 'config=%s\n' '${{ inputs.config }}' >> "$GITHUB_OUTPUT"
        else
          printf 'config=%s\n' '${{ github.action_path }}/cliff.toml' >> "$GITHUB_OUTPUT"
        fi
      shell: bash
    - id: cliff
      name: Generate Changelog
      uses: orhun/git-cliff-action@v4
      with:
        config: ${{ steps.config.outputs.config }}
        args: ${{ inputs.args }}
        github_token: ${{ inputs.token }}
      env:
        GITHUB_REPO: ${{ inputs.repository }}
        GITHUB_TOKEN: ${{ inputs.token }}
        OUTPUT: ${{ inputs.output }}
    - name: Ensure Output File Exists
      run: |-
        if [[ ! -f '${{ inputs.output }}' ]]; then
          touch '${{ inputs.output }}'
        fi
      shell: bash
    - name: Prettier
      run: npx prettier --write '${{ inputs.output }}'
      shell: bash
    - id: output
      name: Set Output
      run: |-
        delimiter="$(openssl rand -hex 8)"
        {
          printf 'content<<%s\n' "$delimiter"
          cat '${{ inputs.output }}'
          printf '%s\n' "$delimiter"
        } >> "$GITHUB_OUTPUT"
      shell: bash

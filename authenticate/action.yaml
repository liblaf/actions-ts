name: Authenticate GitHub App

author: liblaf

description: TODO

inputs:
  app-id:
    description: GitHub App ID
    required: false
  private-key:
    description: GitHub App private key
    required: false
  owner:
    description: The owner of the GitHub App installation (defaults to current repository owner)
    required: false
  repositories:
    description: Comma or newline-separated list of repositories to install the GitHub App on (defaults to current repository if owner is unset)
    required: false
  skip-token-revoke:
    description: If true, the token will not be revoked when the current job is complete
    required: false
    default: "false"

outputs:
  author:
    description: author
    value: ${{ steps.author.outputs.author }}
  author-name:
    description: author-name
    value: ${{ steps.author.outputs.author-name }}
  author-email:
    description: author-email
    value: ${{ steps.author.outputs.author-email }}
  committer:
    description: committer
    value: ${{ steps.committer.outputs.committer }}
  committer-name:
    description: committer-name
    value: ${{ steps.committer.outputs.committer-name }}
  committer-email:
    description: committer-email
    value: ${{ steps.committer.outputs.committer-email }}
  token:
    description: GitHub installation access token
    value: ${{ steps.app.outputs.token || github.token }}

runs:
  using: composite
  steps:
    - name: Create GitHub App Token
      id: app
      uses: actions/create-github-app-token@v2
      with:
        app-id: ${{ inputs.app-id }}
        private-key: ${{ inputs.private-key }}
        owner: ${{ inputs.owner }}
        repositories: ${{ inputs.repositories }}
        skip-token-revoke: ${{ inputs.skip-token-revoke }}
      continue-on-error: true
    - id: author
      name: Config Git Author
      run: |-
        GIT_AUTHOR_NAME='${{ github.actor }}'
        GIT_AUTHOR_EMAIL='${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com'
        GIT_AUTHOR="${GIT_AUTHOR_NAME} <${GIT_AUTHOR_EMAIL}>"
        {
          printf 'GIT_AUTHOR_NAME=%s\n' "$GIT_AUTHOR_NAME"
          printf 'GIT_AUTHOR_EMAIL=%s\n' "$GIT_AUTHOR_EMAIL"
          printf 'GIT_AUTHOR=%s\n' "$GIT_AUTHOR"
        } >> "$GITHUB_ENV"
        {
          printf 'author-name=%s\n' "$GIT_AUTHOR_NAME"
          printf 'author-email=%s\n' "$GIT_AUTHOR_EMAIL"
          printf 'author=%s\n' "$GIT_AUTHOR"
        } >> "$GITHUB_OUTPUT"
      shell: bash
    - id: committer
      name: Config Git Committer
      run: |-
        if [[ '${{ steps.app.outcome }}' == 'success' ]]; then
          app_slug='${{ steps.app.outputs.app-slug }}'
        else
          app_slug='github-actions'
        fi
        GIT_COMMITTER_NAME="${app_slug}[bot]"
        id="$(gh api "/users/$GIT_COMMITTER_NAME" --jq '.id')"
        GIT_COMMITTER_EMAIL="$id+$GIT_COMMITTER_NAME@users.noreply.github.com"
        GIT_COMMITTER="$GIT_COMMITTER_NAME <$GIT_COMMITTER_EMAIL>"
        {
          printf 'GIT_COMMITTER_NAME=%s\n' "$GIT_COMMITTER_NAME"
          printf 'GIT_COMMITTER_EMAIL=%s\n' "$GIT_COMMITTER_EMAIL"
          printf 'GIT_COMMITTER=%s\n' "$GIT_COMMITTER"
        } >> "$GITHUB_ENV"
        {
          printf 'committer-name=%s\n' "$GIT_COMMITTER_NAME"
          printf 'committer-email=%s\n' "$GIT_COMMITTER_EMAIL"
          printf 'committer=%s\n' "$GIT_COMMITTER"
        } >> "$GITHUB_OUTPUT"
      shell: bash
      env:
        GH_TOKEN: ${{ steps.app.outputs.token || github.token }}
    - name: Config Git
      run: |-
        git config --global user.name '${{ steps.committer.outputs.committer-name }}'
        git config --global user.email '${{ steps.committer.outputs.committer-email }}'
      shell: bash
